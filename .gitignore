# To Save the model. Put below code after trining (.fit) the model. You can use any name insted of 'my_model'.  
model.save('my_model.h5')

-------------------------------------------------------------------------------------------------------------------

# To load the saved the model in CNN
from PIL import Image
import numpy as np
from tensorflow import keras

# Load the trained model
model = keras.models.load_model('my_model.h5')

# Load and preprocess the new image
new_image = Image.open('new_image.jpg')
new_image = new_image.resize((32, 32))  # Resize to match CIFAR-100 image dimensions
new_image = np.array(new_image)  # Convert to numpy array
new_image = new_image.astype('float32') / 255.0  # Scale pixel values between 0 and 1
new_image = np.expand_dims(new_image, axis=0)  # Add a batch dimension

# Make predictions
predictions = model.predict(new_image)
predicted_class = np.argmax(predictions)

# Print the predicted class label or probabilities
print('Predicted class:', predicted_class)
print('Class probabilities:', predictions)

--------------------------------------------------------------------------------------------------------------------
#decode labels in the target column of a DataFrame
#For example:
import pandas as pd
# Define the label to target mapping dictionary
label_to_target = {'A': 0, 'B': 1, 'C': 2}
# Function to decode labels
def label_decoder(label):
    return label_to_target[label]
# Read the CSV file into a DataFrame
df = pd.read_csv('/content/train/train.csv', encoding='latin1')
# Apply label decoding to the 'target' column
df['target'] = df['target'].apply(label_decoder)
--------------------------------------------------------------------------------------------------------------------
